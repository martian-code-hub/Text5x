apply plugin: 'com.android.application'


android {
  compileSdkVersion 28
  buildToolsVersion '28.0.3'
  defaultConfig {
    applicationId "com.example.martian"
    minSdkVersion 15
    targetSdkVersion 28
    versionCode 1
    versionName "1.0"
    ndk {
//      moduleName "jnitestlib" //生成的so名字
//      abiFilters "armeabi", "armeabi-v7a", "x86","arm64" //输出指定三种abi体系结构下的so库。目前可有可无。
    }
    javaCompileOptions {
      annotationProcessorOptions {
        arguments = [ moduleName : project.getName() ]
        includeCompileClasspath = true
      }
    }
    vectorDrawables.useSupportLibrary = true
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    debug {
      jniDebuggable true
    }
  }
  productFlavors {
  }

  sourceSets.main {
            jni.srcDirs = ["jni"]
    jniLibs.srcDir 'src/main/libs'
  }
//  repositories {
//    flatDir {
//      dirs 'libs'
//    }
//  }
  lintOptions {
    abortOnError false
  }
}

dependencies {
  compile fileTree(include: ['*.jar'], dir: 'libs')
//  compile project(':volley')
  implementation 'com.android.volley:volley:1.2.0'
  compile 'com.squareup.retrofit2:retrofit:2.1.0'
  compile 'com.squareup.retrofit2:converter-gson:2.1.0'
  compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
  compile 'com.orhanobut:logger:1.3'
  compile 'io.reactivex:rxjava:1.2.2'
  compile 'io.reactivex:rxandroid:1.2.1'
  compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
  compile 'org.greenrobot:eventbus:3.0.0'
  compile 'com.google.dagger:dagger:2.2'
  compile 'com.squareup.okio:okio:1.11.0'
  compile 'com.squareup.okhttp3:okhttp:3.5.0'
  compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
  compile 'com.google.android.gms:play-services-appindexing:8.4.0'
  compile 'com.squareup.wire:wire-runtime:2.2.0'
  compile 'com.android.support.constraint:constraint-layout:1.0.2'
  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-core:2.2.25'
  annotationProcessor 'com.google.dagger:dagger-compiler:2.2'
  debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
  provided 'javax.annotation:jsr250-api:1.0'
  releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
  annotationProcessor 'com.alibaba:arouter-compiler:1.1.2.1'
  compile 'com.alibaba:arouter-api:1.2.1.1'
  //  compile "com.github.VictorAlbertos.RxCache:runtime:1.8.0-2.x"
  //  compile(name: 'AlivcPlayer', ext: 'aar')
  //  compile(name: 'AliyunVodPlayer', ext: 'aar')
  //  compile(name: 'AliyunVodPlayerView', ext: 'aar')
  compile 'com.android.support:recyclerview-v7:28.0.0'
  compile project(':vitamio')
  compile 'com.jakewharton:butterknife:7.0.1'
  compile 'com.zhihu.android:matisse:0.4.3'
  compile 'top.zibin:Luban:1.1.3'
  compile 'com.github.bumptech.glide:glide:3.7.0'
  compile 'com.alibaba:fastjson:1.2.5'
  compile 'com.android.support:support-v4:28.0.0'
  compile 'com.android.support:appcompat-v7:28.0.0'
  compile 'com.android.support:design:28.0.0'
  compile 'com.android.support:cardview-v7:28.0.0'

  // 若使用annotation需要单独引用,对于tinker的其他库都无需再引用
  provided("com.tinkerpatch.tinker:tinker-android-anno:1.9.1")
  compile("com.tinkerpatch.sdk:tinkerpatch-android-sdk:1.2.1")
}
apply from: 'tinkerpatch.gradle'

////删除dynamic.jar包任务
//task clearJar(type: Delete) {
//  delete 'libs/dynamic.jar'
//}
//
////Copy类型
//task makeJar(type:Jar) {
//  //删除存在的
//  archiveName = 'dynamic.jar'
//  //设置拷贝的文件
//  from ('build/intermediates/classes/debug/com/example/martian/dex/impl/')
//  //打包到jar后的目录结构
//  into('com/example/martian/dex/impl/')
//  //打进jar包后的文件目录
//  destinationDir = file('build/libs')
//  //将classes.jar放入build/libs/目录下
////  exclude( 'IShowToast.class')
////  //去掉R$开头的文件
////  exclude{ it.name.startsWith('R$');}
//}
////makeJar.dependsOn(build)
//makeJar.dependsOn(clearJar, build)

//在终端执行生成JAR包
//task buildMyJar(type: Jar, dependsOn: ['build']) {
//  //导出的jar文件名称
//  archiveName = 'TestApp.jar'
//  //从哪个目录打包jar
//  from('build/intermediates/classes/debug')
//  //导出的jar文件的存放目录（未指定则默认存放在build/libs下）
//  destinationDir = file('build/libs')
//  //去掉不要的类
//  exclude('com/example/testapp/BuildConfig.class')
//  exclude('com/example/testapp/BuildConfig\$*.class')
//  exclude('**/R.class')
//  exclude('**/R\$*.class')
//  //需要打包的类
//  include('com/example/testapp/*.class')
//}
